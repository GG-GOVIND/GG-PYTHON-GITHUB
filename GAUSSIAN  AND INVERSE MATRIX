
# |A|
def determinant_2x2(matrix):
    return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]

det_A = determinant_2x2(A)
print(f"\nDeterminant of A: {det_A}")

if abs(det_A) < 1e-10:
    print("Matrix is singular. No unique solution exists.")
    exit()

# Gaussian Elimination Method
def gaussian_elimination(A, b):
    n = len(b)
    Ab = []
    for i in range(n):
        row = A[i][:] + [b[i]]
        Ab.append(row)
    
    print("Initial augmented matrix:")
    for row in Ab:
        print([round(x, 4) for x in row])
    
    # Forward elimination
    for i in range(n):
        pivot = Ab[i][i]
        for j in range(len(Ab[i])):
            Ab[i][j] = Ab[i][j] / pivot
        
        print(f"\nAfter making A[{i},{i}] = 1:")
        for row in Ab:
            print([round(x, 4) for x in row])
        
        for k in range(i + 1, n):
            factor = Ab[k][i]
            for j in range(len(Ab[k])):
                Ab[k][j] = Ab[k][j] - factor * Ab[i][j]
        
        if i < n - 1:
            print(f"After eliminating column {i}:")
            for row in Ab:
                print([round(x, 4) for x in row])
    
    # Back substitution
    x = [0] * n
    for i in range(n - 1, -1, -1):
        x[i] = Ab[i][-1]
        for j in range(i + 1, n):
            x[i] = x[i] - Ab[i][j] * x[j]
    
    return x

x_gaussian = gaussian_elimination(A, b)
print(f"\nSolution using Gauss Eliminatn:")
print(f"x = {x_gaussian}")

# Input 2x2 
print("Enter the 2x2 matrix A:")
a11 = float(input("Enter A[0,0]: "))
a12 = float(input("Enter A[0,1]: "))
a21 = float(input("Enter A[1,0]: "))
a22 = float(input("Enter A[1,1]: "))

print("\nEnter the vector b:")
b1 = float(input("Enter b[0]: "))
b2 = float(input("Enter b[1]: "))

A = [[a11, a12], [a21, a22]]
b = [b1, b2]

print("\nMatrix A:")
for row in A:
    print(row)
print("\nVector b:")
print(b)

# |A|
def determinant_2x2(matrix):
    return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]

det_A = determinant_2x2(A)
print(f"\nDeterminant of A: {det_A}")

if abs(det_A) < 1e-10:
    print("Matrix is singular. No unique solution exists.")
    exit()

# Gaussian Elimination Method
def gaussian_elimination(A, b):
    n = len(b)
    Ab = []
    for i in range(n):
        row = A[i][:] + [b[i]]
        Ab.append(row)
    
    print("Initial augmented matrix:")
    for row in Ab:
        print([round(x, 4) for x in row])
    
    # Forward elimination
    for i in range(n):
        pivot = Ab[i][i]
        for j in range(len(Ab[i])):
            Ab[i][j] = Ab[i][j] / pivot
        
        print(f"\nAfter making A[{i},{i}] = 1:")
        for row in Ab:
            print([round(x, 4) for x in row])
        
        for k in range(i + 1, n):
            factor = Ab[k][i]
            for j in range(len(Ab[k])):
                Ab[k][j] = Ab[k][j] - factor * Ab[i][j]
        
        if i < n - 1:
            print(f"After eliminating column {i}:")
            for row in Ab:
                print([round(x, 4) for x in row])
    
    # Back substitution
    x = [0] * n
    for i in range(n - 1, -1, -1):
        x[i] = Ab[i][-1]
        for j in range(i + 1, n):
            x[i] = x[i] - Ab[i][j] * x[j]
    
    return x

x_gaussian = gaussian_elimination(A, b)
print(f"\nSolution using Gauss Eliminatn:")
print(f"x = {x_gaussian}")

# M-ยน
def matrix_inverse_2x2(matrix):
    det = determinant_2x2(matrix)
    if abs(det) < 1e-10:
        return None
    
    inv = [[matrix[1][1]/det, -matrix[0][1]/det],
           [-matrix[1][0]/det, matrix[0][0]/det]]
    return inv

def matrix_vector_multiply(matrix, vector):
    result = []
    for i in range(len(matrix)):
        sum_val = 0
        for j in range(len(vector)):
            sum_val += matrix[i][j] * vector[j]
        result.append(sum_val)
    return result

A_inv = matrix_inverse_2x2(A)
print(f"\nInverse A:")
for row in A_inv:
    print([round(x, 4) for x in row])

x_inverse = matrix_vector_multiply(A_inv, b)
print(f"\nSolutio Inverse :")
print(f"x = {x_inverse}")

